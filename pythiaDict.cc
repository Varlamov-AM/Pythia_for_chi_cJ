//
// File generated by rootcint at Fri Jul  1 13:05:21 2022

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME pythiaDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "pythiaDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void AliParticle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliParticle(void *p = 0);
   static void *newArray_AliParticle(Long_t size, void *p);
   static void delete_AliParticle(void *p);
   static void deleteArray_AliParticle(void *p);
   static void destruct_AliParticle(void *p);
   static void streamer_AliParticle(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliParticle*)
   {
      ::AliParticle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliParticle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliParticle", ::AliParticle::Class_Version(), "./AliParticle.h", 7,
                  typeid(::AliParticle), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliParticle::Dictionary, isa_proxy, 0,
                  sizeof(::AliParticle) );
      instance.SetNew(&new_AliParticle);
      instance.SetNewArray(&newArray_AliParticle);
      instance.SetDelete(&delete_AliParticle);
      instance.SetDeleteArray(&deleteArray_AliParticle);
      instance.SetDestructor(&destruct_AliParticle);
      instance.SetStreamerFunc(&streamer_AliParticle);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliParticle*)
   {
      return GenerateInitInstanceLocal((::AliParticle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliParticle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliEvent(void *p = 0);
   static void *newArray_AliEvent(Long_t size, void *p);
   static void delete_AliEvent(void *p);
   static void deleteArray_AliEvent(void *p);
   static void destruct_AliEvent(void *p);
   static void streamer_AliEvent(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliEvent*)
   {
      ::AliEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliEvent", ::AliEvent::Class_Version(), "./AliEvent.h", 8,
                  typeid(::AliEvent), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliEvent::Dictionary, isa_proxy, 0,
                  sizeof(::AliEvent) );
      instance.SetNew(&new_AliEvent);
      instance.SetNewArray(&newArray_AliEvent);
      instance.SetDelete(&delete_AliEvent);
      instance.SetDeleteArray(&deleteArray_AliEvent);
      instance.SetDestructor(&destruct_AliEvent);
      instance.SetStreamerFunc(&streamer_AliEvent);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliEvent*)
   {
      return GenerateInitInstanceLocal((::AliEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr AliParticle::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliParticle::Class_Name()
{
   return "AliParticle";
}

//______________________________________________________________________________
const char *AliParticle::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliParticle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliParticle::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliParticle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliParticle::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliParticle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliParticle::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliParticle*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliEvent::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliEvent::Class_Name()
{
   return "AliEvent";
}

//______________________________________________________________________________
const char *AliEvent::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliEvent::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliEvent::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliEvent::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliEvent*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void AliParticle::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliParticle.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> px;
      R__b >> py;
      R__b >> pz;
      R__b >> p0;
      R__b >> id;
      R__b >> number_in_event;
      R__b >> mother_id;
      R__b >> mother_number_in_event;
      R__b >> daughter_1_number_in_event;
      R__b >> daughter_2_number_in_event;
      R__b.CheckByteCount(R__s, R__c, AliParticle::IsA());
   } else {
      R__c = R__b.WriteVersion(AliParticle::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << px;
      R__b << py;
      R__b << pz;
      R__b << p0;
      R__b << id;
      R__b << number_in_event;
      R__b << mother_id;
      R__b << mother_number_in_event;
      R__b << daughter_1_number_in_event;
      R__b << daughter_2_number_in_event;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void AliParticle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliParticle.
      TClass *R__cl = ::AliParticle::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "px", &px);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "py", &py);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pz", &pz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p0", &p0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id", &id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "number_in_event", &number_in_event);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mother_id", &mother_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mother_number_in_event", &mother_number_in_event);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "daughter_1_number_in_event", &daughter_1_number_in_event);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "daughter_2_number_in_event", &daughter_2_number_in_event);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliParticle(void *p) {
      return  p ? new(p) ::AliParticle : new ::AliParticle;
   }
   static void *newArray_AliParticle(Long_t nElements, void *p) {
      return p ? new(p) ::AliParticle[nElements] : new ::AliParticle[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliParticle(void *p) {
      delete ((::AliParticle*)p);
   }
   static void deleteArray_AliParticle(void *p) {
      delete [] ((::AliParticle*)p);
   }
   static void destruct_AliParticle(void *p) {
      typedef ::AliParticle current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_AliParticle(TBuffer &buf, void *obj) {
      ((::AliParticle*)obj)->::AliParticle::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::AliParticle

//______________________________________________________________________________
void AliEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliEvent.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> number_of_particle_in_event;
      R__b >> number_of_electrons;
      chic.Streamer(R__b);
      Jpsi.Streamer(R__b);
      {
         vector<AliParticle> &R__stl =  electrons;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            AliParticle R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<AliParticle> &R__stl =  positrons;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            AliParticle R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<AliParticle> &R__stl =  photons;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            AliParticle R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<AliParticle> &R__stl =  charged;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            AliParticle R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<AliParticle> &R__stl =  neutral;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            AliParticle R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, AliEvent::IsA());
   } else {
      R__c = R__b.WriteVersion(AliEvent::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << number_of_particle_in_event;
      R__b << number_of_electrons;
      chic.Streamer(R__b);
      Jpsi.Streamer(R__b);
      {
         vector<AliParticle> &R__stl =  electrons;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<AliParticle>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((AliParticle&)(*R__k)).Streamer(R__b);
            }
         }
      }
      {
         vector<AliParticle> &R__stl =  positrons;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<AliParticle>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((AliParticle&)(*R__k)).Streamer(R__b);
            }
         }
      }
      {
         vector<AliParticle> &R__stl =  photons;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<AliParticle>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((AliParticle&)(*R__k)).Streamer(R__b);
            }
         }
      }
      {
         vector<AliParticle> &R__stl =  charged;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<AliParticle>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((AliParticle&)(*R__k)).Streamer(R__b);
            }
         }
      }
      {
         vector<AliParticle> &R__stl =  neutral;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<AliParticle>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((AliParticle&)(*R__k)).Streamer(R__b);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void AliEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliEvent.
      TClass *R__cl = ::AliEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "number_of_particle_in_event", &number_of_particle_in_event);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "number_of_electrons", &number_of_electrons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chic", &chic);
      R__insp.InspectMember(chic, "chic.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Jpsi", &Jpsi);
      R__insp.InspectMember(Jpsi, "Jpsi.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "electrons", (void*)&electrons);
      R__insp.InspectMember("vector<AliParticle>", (void*)&electrons, "electrons.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "positrons", (void*)&positrons);
      R__insp.InspectMember("vector<AliParticle>", (void*)&positrons, "positrons.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "photons", (void*)&photons);
      R__insp.InspectMember("vector<AliParticle>", (void*)&photons, "photons.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charged", (void*)&charged);
      R__insp.InspectMember("vector<AliParticle>", (void*)&charged, "charged.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "neutral", (void*)&neutral);
      R__insp.InspectMember("vector<AliParticle>", (void*)&neutral, "neutral.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliEvent(void *p) {
      return  p ? new(p) ::AliEvent : new ::AliEvent;
   }
   static void *newArray_AliEvent(Long_t nElements, void *p) {
      return p ? new(p) ::AliEvent[nElements] : new ::AliEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliEvent(void *p) {
      delete ((::AliEvent*)p);
   }
   static void deleteArray_AliEvent(void *p) {
      delete [] ((::AliEvent*)p);
   }
   static void destruct_AliEvent(void *p) {
      typedef ::AliEvent current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_AliEvent(TBuffer &buf, void *obj) {
      ((::AliEvent*)obj)->::AliEvent::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::AliEvent

namespace ROOTDict {
   void vectorlEAliParticlegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEAliParticlegR_Dictionary();
   static void *new_vectorlEAliParticlegR(void *p = 0);
   static void *newArray_vectorlEAliParticlegR(Long_t size, void *p);
   static void delete_vectorlEAliParticlegR(void *p);
   static void deleteArray_vectorlEAliParticlegR(void *p);
   static void destruct_vectorlEAliParticlegR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<AliParticle>*)
   {
      vector<AliParticle> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<AliParticle>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<AliParticle>", -2, "prec_stl/vector", 49,
                  typeid(vector<AliParticle>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEAliParticlegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<AliParticle>) );
      instance.SetNew(&new_vectorlEAliParticlegR);
      instance.SetNewArray(&newArray_vectorlEAliParticlegR);
      instance.SetDelete(&delete_vectorlEAliParticlegR);
      instance.SetDeleteArray(&deleteArray_vectorlEAliParticlegR);
      instance.SetDestructor(&destruct_vectorlEAliParticlegR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<AliParticle> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<AliParticle>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEAliParticlegR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<AliParticle>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEAliParticlegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<AliParticle> : new vector<AliParticle>;
   }
   static void *newArray_vectorlEAliParticlegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<AliParticle>[nElements] : new vector<AliParticle>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEAliParticlegR(void *p) {
      delete ((vector<AliParticle>*)p);
   }
   static void deleteArray_vectorlEAliParticlegR(void *p) {
      delete [] ((vector<AliParticle>*)p);
   }
   static void destruct_vectorlEAliParticlegR(void *p) {
      typedef vector<AliParticle> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<AliParticle>

/********************************************************
* pythiaDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablepythiaDict();

extern "C" void G__set_cpp_environmentpythiaDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("AliParticle.h");
  G__add_compiledheader("AliEvent.h");
  G__cpp_reset_tagtablepythiaDict();
}
#include <new>
extern "C" int G__cpp_dllrevpythiaDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* AliParticle */
static int G__pythiaDict_226_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliParticle[n];
     } else {
       p = new((void*) gvp) AliParticle[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliParticle;
     } else {
       p = new((void*) gvp) AliParticle;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__pythiaDictLN_AliParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__pythiaDict_226_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((AliParticle*) G__getstructoffset())->FMomentum();
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__pythiaDict_226_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliParticle*) G__getstructoffset())->Number_of_daughters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__pythiaDict_226_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliParticle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__pythiaDict_226_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliParticle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__pythiaDict_226_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliParticle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__pythiaDict_226_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliParticle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__pythiaDict_226_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliParticle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__pythiaDict_226_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliParticle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__pythiaDict_226_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliParticle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__pythiaDict_226_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliParticle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__pythiaDict_226_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliParticle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__pythiaDict_226_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliParticle* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliParticle(*(AliParticle*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__pythiaDictLN_AliParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliParticle G__TAliParticle;
static int G__pythiaDict_226_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliParticle*) (soff+(sizeof(AliParticle)*i)))->~G__TAliParticle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliParticle*) (soff))->~G__TAliParticle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__pythiaDict_226_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliParticle* dest = (AliParticle*) G__getstructoffset();
   *dest = *(AliParticle*) libp->para[0].ref;
   const AliParticle& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliEvent */
static int G__pythiaDict_227_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliEvent[n];
     } else {
       p = new((void*) gvp) AliEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliEvent;
     } else {
       p = new((void*) gvp) AliEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__pythiaDictLN_AliEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__pythiaDict_227_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__pythiaDict_227_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__pythiaDict_227_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__pythiaDict_227_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__pythiaDict_227_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__pythiaDict_227_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__pythiaDict_227_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__pythiaDict_227_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__pythiaDict_227_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__pythiaDict_227_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliEvent(*(AliEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__pythiaDictLN_AliEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliEvent G__TAliEvent;
static int G__pythiaDict_227_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliEvent*) (soff+(sizeof(AliEvent)*i)))->~G__TAliEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliEvent*) (soff))->~G__TAliEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__pythiaDict_227_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliEvent* dest = (AliEvent*) G__getstructoffset();
   *dest = *(AliEvent*) libp->para[0].ref;
   const AliEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* AliParticle */

/* AliEvent */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncpythiaDict {
 public:
  G__Sizep2memfuncpythiaDict(): p(&G__Sizep2memfuncpythiaDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncpythiaDict::*p)();
};

size_t G__get_sizep2memfuncpythiaDict()
{
  G__Sizep2memfuncpythiaDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancepythiaDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__pythiaDictLN_AliParticle))) {
     AliParticle *G__Lderived;
     G__Lderived=(AliParticle*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__pythiaDictLN_AliParticle),G__get_linked_tagnum(&G__pythiaDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__pythiaDictLN_AliEvent))) {
     AliEvent *G__Lderived;
     G__Lderived=(AliEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__pythiaDictLN_AliEvent),G__get_linked_tagnum(&G__pythiaDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablepythiaDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* AliParticle */
static void G__setup_memvarAliParticle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__pythiaDictLN_AliParticle));
   { AliParticle *p; p=(AliParticle*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->px)-(long)(p)),100,0,0,-1,-1,-1,1,"px=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->py)-(long)(p)),100,0,0,-1,-1,-1,1,"py=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pz)-(long)(p)),100,0,0,-1,-1,-1,1,"pz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->p0)-(long)(p)),100,0,0,-1,-1,-1,1,"p0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->id)-(long)(p)),105,0,0,-1,-1,-1,1,"id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->number_in_event)-(long)(p)),105,0,0,-1,-1,-1,1,"number_in_event=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mother_id)-(long)(p)),105,0,0,-1,-1,-1,1,"mother_id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mother_number_in_event)-(long)(p)),105,0,0,-1,-1,-1,1,"mother_number_in_event=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->daughter_1_number_in_event)-(long)(p)),105,0,0,-1,-1,-1,1,"daughter_1_number_in_event=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->daughter_2_number_in_event)-(long)(p)),105,0,0,-1,-1,-1,1,"daughter_2_number_in_event=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__pythiaDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliEvent */
static void G__setup_memvarAliEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__pythiaDictLN_AliEvent));
   { AliEvent *p; p=(AliEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->number_of_particle_in_event)-(long)(p)),105,0,0,-1,-1,-1,1,"number_of_particle_in_event=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->number_of_electrons)-(long)(p)),105,0,0,-1,-1,-1,1,"number_of_electrons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chic)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__pythiaDictLN_AliParticle),-1,-1,1,"chic=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Jpsi)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__pythiaDictLN_AliParticle),-1,-1,1,"Jpsi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->electrons)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__pythiaDictLN_vectorlEAliParticlecOallocatorlEAliParticlegRsPgR),G__defined_typename("vector<AliParticle>"),-1,1,"electrons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->positrons)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__pythiaDictLN_vectorlEAliParticlecOallocatorlEAliParticlegRsPgR),G__defined_typename("vector<AliParticle>"),-1,1,"positrons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->photons)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__pythiaDictLN_vectorlEAliParticlecOallocatorlEAliParticlegRsPgR),G__defined_typename("vector<AliParticle>"),-1,1,"photons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->charged)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__pythiaDictLN_vectorlEAliParticlecOallocatorlEAliParticlegRsPgR),G__defined_typename("vector<AliParticle>"),-1,1,"charged=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->neutral)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__pythiaDictLN_vectorlEAliParticlecOallocatorlEAliParticlegRsPgR),G__defined_typename("vector<AliParticle>"),-1,1,"neutral=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__pythiaDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarpythiaDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncAliParticle(void) {
   /* AliParticle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__pythiaDictLN_AliParticle));
   G__memfunc_setup("AliParticle",1098,G__pythiaDict_226_0_1, 105, G__get_linked_tagnum(&G__pythiaDictLN_AliParticle), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FMomentum",920,G__pythiaDict_226_0_2, 117, G__get_linked_tagnum(&G__pythiaDictLN_TLorentzVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Number_of_daughters",1987,G__pythiaDict_226_0_3, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__pythiaDict_226_0_4, 85, G__get_linked_tagnum(&G__pythiaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliParticle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__pythiaDict_226_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliParticle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__pythiaDict_226_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliParticle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__pythiaDict_226_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliParticle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__pythiaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__pythiaDict_226_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__pythiaDict_226_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliParticle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__pythiaDict_226_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliParticle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__pythiaDict_226_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliParticle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__pythiaDict_226_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliParticle::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliParticle", 1098, G__pythiaDict_226_0_16, (int) ('i'), G__get_linked_tagnum(&G__pythiaDictLN_AliParticle), -1, 0, 1, 1, 1, 0, "u 'AliParticle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliParticle", 1224, G__pythiaDict_226_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__pythiaDict_226_0_18, (int) ('u'), G__get_linked_tagnum(&G__pythiaDictLN_AliParticle), -1, 1, 1, 1, 1, 0, "u 'AliParticle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliEvent(void) {
   /* AliEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__pythiaDictLN_AliEvent));
   G__memfunc_setup("AliEvent",792,G__pythiaDict_227_0_1, 105, G__get_linked_tagnum(&G__pythiaDictLN_AliEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__pythiaDict_227_0_2, 85, G__get_linked_tagnum(&G__pythiaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__pythiaDict_227_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__pythiaDict_227_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__pythiaDict_227_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__pythiaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__pythiaDict_227_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__pythiaDict_227_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__pythiaDict_227_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__pythiaDict_227_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__pythiaDict_227_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliEvent::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliEvent", 792, G__pythiaDict_227_0_14, (int) ('i'), G__get_linked_tagnum(&G__pythiaDictLN_AliEvent), -1, 0, 1, 1, 1, 0, "u 'AliEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliEvent", 918, G__pythiaDict_227_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__pythiaDict_227_0_16, (int) ('u'), G__get_linked_tagnum(&G__pythiaDictLN_AliEvent), -1, 1, 1, 1, 1, 0, "u 'AliEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncpythiaDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalpythiaDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcpythiaDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__pythiaDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__pythiaDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__pythiaDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__pythiaDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__pythiaDictLN_TLorentzVector = { "TLorentzVector" , 99 , -1 };
G__linked_taginfo G__pythiaDictLN_AliParticle = { "AliParticle" , 99 , -1 };
G__linked_taginfo G__pythiaDictLN_AliEvent = { "AliEvent" , 99 , -1 };
G__linked_taginfo G__pythiaDictLN_vectorlEAliParticlecOallocatorlEAliParticlegRsPgR = { "vector<AliParticle,allocator<AliParticle> >" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablepythiaDict() {
  G__pythiaDictLN_TClass.tagnum = -1 ;
  G__pythiaDictLN_TBuffer.tagnum = -1 ;
  G__pythiaDictLN_TMemberInspector.tagnum = -1 ;
  G__pythiaDictLN_TObject.tagnum = -1 ;
  G__pythiaDictLN_TLorentzVector.tagnum = -1 ;
  G__pythiaDictLN_AliParticle.tagnum = -1 ;
  G__pythiaDictLN_AliEvent.tagnum = -1 ;
  G__pythiaDictLN_vectorlEAliParticlecOallocatorlEAliParticlegRsPgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablepythiaDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__pythiaDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__pythiaDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__pythiaDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__pythiaDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__pythiaDictLN_TLorentzVector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__pythiaDictLN_AliParticle),sizeof(AliParticle),-1,29952,(char*)NULL,G__setup_memvarAliParticle,G__setup_memfuncAliParticle);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__pythiaDictLN_AliEvent),sizeof(AliEvent),-1,29952,(char*)NULL,G__setup_memvarAliEvent,G__setup_memfuncAliEvent);
   G__get_linked_tagnum_fwd(&G__pythiaDictLN_vectorlEAliParticlecOallocatorlEAliParticlegRsPgR);
}
extern "C" void G__cpp_setuppythiaDict(void) {
  G__check_setup_version(30051515,"G__cpp_setuppythiaDict()");
  G__set_cpp_environmentpythiaDict();
  G__cpp_setup_tagtablepythiaDict();

  G__cpp_setup_inheritancepythiaDict();

  G__cpp_setup_typetablepythiaDict();

  G__cpp_setup_memvarpythiaDict();

  G__cpp_setup_memfuncpythiaDict();
  G__cpp_setup_globalpythiaDict();
  G__cpp_setup_funcpythiaDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncpythiaDict();
  return;
}
class G__cpp_setup_initpythiaDict {
  public:
    G__cpp_setup_initpythiaDict() { G__add_setup_func("pythiaDict",(G__incsetup)(&G__cpp_setuppythiaDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initpythiaDict() { G__remove_setup_func("pythiaDict"); }
};
G__cpp_setup_initpythiaDict G__cpp_setup_initializerpythiaDict;

